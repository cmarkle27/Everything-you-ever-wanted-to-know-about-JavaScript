{"name":"Everything-you-ever-wanted-to-know-about-javascript *","tagline":"* But were afraid to ask","body":"# JavaScript Looks Familiar\r\n\r\n***  \r\n\r\n### __Designed to be easy for developers to pick up__  \r\n\r\n```javascript\r\nif (encoder.state == \"cue record\") {\r\n    beginRecording();\r\n}\r\n```\r\n\r\n### __Is actually based on the languages Scheme and Self__  \r\n\r\n```javascript\r\nfunction Y(le) {\r\n    return (function (f) {\r\n        return f(f);\r\n    }(function (f) {\r\n        return le(function (x) {\r\n            return f(f)(x);\r\n        });\r\n    }));\r\n}\r\n\r\nvar sliced = Array.prototype.slice.call(arguments, 2);\r\n```\r\n<br><br><br>\r\n\r\n# JavaScript Requires an Environment  \r\n\r\n***  \r\n\r\n### __Provides a root object and an environment API__\r\n\r\n* Browser: window object and the DOM + BOM  \r\n* Server: process object and the native modules \r\n\r\n<br><br><br>\r\n<br><br><br>\r\n<br><br><br>\r\n\r\n# Single Threaded and Event Driven \r\n\r\n***  \r\n\r\n### Basic flow of execution: \r\n1. Script is parsed and lexed \r\n1. Code is executed \r\n1. Events are registered \r\n1. Idles in event loop \r\n1. Triggered events are added to the queue (return to 1) \r\n\r\n```javascript\r\n// one thing at a time\r\nfor (var i = 1; i < 1000; i++) {\r\n    console.log(i);\r\n    if (i === 250) alert(\"Wait!\");\r\n}\r\n\r\n// events fire asynchronously\r\nvar no;\r\n\r\nfor (var i = 1; i <= 10; i++) {\r\n    no = i;\r\n    setTimeout(function() {\r\n       console.log('setting: ' + no);\r\n    }, 500);\r\n}\r\n```\r\n\r\n<br><br><br>\r\n\r\n# Variables \r\n\r\n***  \r\n\r\n* Declared with “var” keyword\r\n* Dynamically typed\r\n* Simple types are copied by value\r\n* Complex types are copied by reference\r\n\r\n```javascript\r\n// simple values like are copied by value\r\nvar a = 7;\r\nvar b = a;\r\na = 4;\r\nconsole.log(a, b);\r\n\r\n// complex values are passed by reference\r\nvar yourCar = new Object();\r\nyourCar.make = \"Ford\";\r\nyourCar.model = \"Mustang\";\r\nyourCar.mileage = 28000;\r\n\r\nvar myCar = yourCar;\r\nyourCar.mileage = 30000;\r\n\r\nconsole.log(myCar);\r\n```\r\n\r\n<br><br><br>\r\n\r\n# Everything is an Object \r\n\r\n***  \r\n\r\n### Even primitives are objects\r\n\r\n```javascript\r\n// strings are objects\r\nvar name = \"Christopher\";\r\nconsole.log(typeof name, name.length);\r\n\r\n// numbers are objects\r\nvar myNumber = 13.27;\r\nconsole.log(typeof myNumber, myNumber.toFixed());\r\n\r\n// objects are objects\r\nvar obj = {\r\n  \"title\": \"Leviathan Wakes\",\r\n  \"author\": \"James S. A. Corey\"\r\n  \"pages\": 561\r\n}\r\nconsole.log(typeof obj, obj.author)\r\n\r\n// functions are objects\r\nvar fun = function myFun() {}\r\nconsole.log(typeof fun, fun.name);\r\n```\r\n\r\n### Objects can contain simple or complex types\r\n\r\n```javascript\r\nvar recording = new Object();\r\n\r\n// number\r\nrecording.duration = 31000;\r\n\r\n// string\r\nrecording.slug = \"Cat Roomba Video\";\r\n\r\n// array\r\nrecording.tags = [\"funny\", \"lolcat\", \"roomba\"];\r\n\r\n// object\r\nrecording.meta = {\r\n  \"bureau\" : \"DC\",\r\n  \"date\" : \"08/12/2007\"\r\n};\r\n\r\n// function\r\nrecording.getDuration = function() {\r\n  return Math.floor(this.duration / 1000).toFixed();\r\n};\r\n\r\nconsole.log(recording);\r\n```\r\n<br><br><br>\r\n\r\n# As Promised\r\n\r\n***  \r\n\r\n[http://youtu.be/wBqzjH91WFo](http://youtu.be/wBqzjH91WFo)\r\n\r\n<br><br><br>\r\n<br><br><br>\r\n\r\n# JavaScript is Functional\r\n\r\n***  \r\n\r\n### Functions can be passed as values\r\n\r\n```javascript\r\nvar sayHello = function() {\r\n  return \"Howdy!\";\r\n};\r\n\r\nconsole.log(sayHello())\r\n\r\nconsole.log(sayHello)\r\n```\r\n\r\n### This fits well with event driven programming\r\n\r\n[http://jsbin.com/zidad/2/edit?html,js,output](http://jsbin.com/zidad/2/edit?html,js,output)\r\n\r\n<br><br><br>\r\n\r\n# Constructor Functions\r\n\r\n***  \r\n\r\n### Returns an object instance when used with the new keyword\r\n\r\n```javascript\r\nvar Animal = function(species) {\r\n  this.species = species;\r\n  this.birthday = \"02/11/2014\";\r\n  return this; // implied\r\n};\r\n\r\nvar carl = new Animal(\"tiger\");\r\nconsole.log(carl);\r\n```\r\n\r\n### Nine native object constructor functions\r\n\r\n```javascript\r\n// these cause trouble\r\nnew String(\"hello\");\r\nnew Number(9);\r\nnew Boolean(false);\r\n\r\n// these are better as literals\r\nnew RegExp('\\ bt[ a-z] +\\ b');\r\nnew Object();\r\nnew Array(\"a\", \"b\", \"c\");\r\nnew Function(\" x\", \"y\", \"return x * y\");\r\n\r\n// these are ok\r\nnew Error(\"message\");\r\nnew Date();\r\n\r\n// this object is not a constructor\r\nMath\r\n```\r\n\r\n<br><br><br>\r\n\r\n# JavaScript is Prototypal\r\n\r\n***  \r\n\r\n### Instances are created from objects instead of classes\r\n\r\n```javascript\r\nvar Animal = function(species) {\r\n  this.species = species;\r\n  this.birthday = \"02/11/2014\";\r\n  return this; // implied\r\n};\r\n\r\nvar carl = new Animal(\"tiger\");\r\n\r\nconsole.log(carl);\r\nconsole.log(carl.constructor);\r\nconsole.log(carl instanceof Animal);\r\nconsole.log(carl instanceof Object);\r\n```\r\n\r\n\r\n### Inherit built-in properties\r\n\r\n```javascript\r\n// inherited object properties\r\nvar serenity = { \"class\": \"Firefly\", \"captain\": \"Malcolm Reynolds\" };\r\n\r\nconsole.log(serenity.toString());\r\nconsole.log(serenity.constructor);\r\n\r\n// inherited function properties\r\nvar spaceShip = function launcher(vehicle) {\r\n  console.log(vehicle + \" blasting off!\");\r\n};\r\n\r\nconsole.log(spaceShip.name);\r\nconsole.log(spaceShip.length);\r\nconsole.log(spaceShip.prototype);\r\n\r\n// inherited array properties\r\nvar groceries = [\"turkey\", \"bread\", \"cheese\", \"carrots\"];\r\n\r\nconsole.log(groceries.length);\r\nconsole.log(groceries.reverse());\r\n```\r\n\r\n### Can model classical inheritance (but don’t)\r\n\r\n```javascript\r\n// Animal Constructor\r\nfunction Animal(species) { \r\n\tthis.species = species;\r\n\tthis.energy = 15;\r\n\tthis.sound = \"...\";\r\n}\r\n\r\n// Animal.prototype is a generic object we can add properties to\r\nAnimal.prototype.makeNoise = function(){ \r\n\tthis.energy -= 3;\r\n\tconsole.log(this.sound);\r\n};\r\n\r\nAnimal.prototype.reportEnergy = function(){ \r\n\tconsole.log(\"Energy Level:\", this.energy);\r\n}; \r\n\r\nAnimal.prototype.eat = function(food){ \r\n\tif (food instanceof Food) {\r\n\t\tthis.energy += 5;\r\n\t}\r\n};  \r\n\r\nAnimal.prototype.sleep = function(){ \r\n    this.energy += 10;\r\n};\r\n\r\n// Tiger Constructor\r\nvar Tiger = function() { \r\n    this.sound = 'Meow!';\r\n};\r\n\r\nTiger.prototype = new Animal('Tiger');\r\n \r\nTiger.prototype.eat = function(food){ \r\n    if (food instanceof Food && food.type !== 'grain') {\r\n\tthis.energy += 5;\r\n    }\r\n};\r\n\r\n// Instance\r\nvar timmy = new Tiger();\r\n\r\nconsole.log(timmy);\r\n```\r\n### Duck Typing\r\n\r\n```javascript\r\nvar Animal = {\r\n    makeNoise: function() {\r\n\tthis.energy -= 3;\r\n    \tconsole.log(this.sound + \" I am a \" + this.species + \". Energy: \" + this.energy);\r\n    }\r\n};\r\n\r\n// Tiger Constructor\r\nvar Tiger = function() { \r\n    this.sound = 'Meow!';\r\n    this.species = 'Tiger';\r\n    this.energy = 15;  \r\n};\r\n\r\nvar timmy = new Tiger();\r\n\r\n// use duck typing\r\nAnimal.makeNoise.call(timmy);\r\n```\r\n\r\n<br><br><br>\r\n\r\n# The Scope Chain\r\n\r\n***  \r\n\r\n### Function level (not block level)\r\n\r\n```javascript\r\nvar foo = 0; // global scope \r\nconsole.log(foo); // logs 0\r\n\r\nvar myFunction = (function() {\r\n    var foo = 1; // local scope\r\n    console.log(foo); // logs 1\r\n\t\r\n    var myNestedFunction = (function() {\r\n        var foo = 2; // local scope\r\n        console.log( foo); // logs 2\r\n    })();\r\n\r\n})();\r\n\r\neval('var foo = 3; console.log( foo);'); // eval() scope\r\n\r\n```\r\n\r\n### Variables are defined at parse time (lexical scoping)\r\n\r\n```javascript\r\nvar x = 10;\r\nvar foo = function() {\r\n    var y = 20;\r\n    var bar = (function() {\r\n        var z = 30;\r\n        console.log(z + y + x); // z is local, y & z are found in the scope chain\r\n    })();\r\n};\r\n\r\nfoo(); // logs 60\r\n```\r\n\r\n### Closures \r\n\r\n```javascript\r\nvar counterFactory = function() {\r\n    var counter = 0;\r\n    return function() { \r\n        counter++;\r\n    \tconsole.log(counter);\r\n    }\r\n}\r\n\r\nvar count = counterFactory();\r\n\r\ncount();\r\ncount();\r\ncount();\r\n```\r\n\r\n<br><br><br>\r\n\r\n# Execution Context\r\n\r\n***  \r\n\r\n### The 'this' Keyword\r\n* refers to current execution contexts\r\n\r\n### Four possible contexts\r\n\r\n* Function \r\n\r\n```javascript\r\nfunction add(x, y) {\r\n    // 'this' refers to the global object \r\n    var sum = this.x + this.y;\r\n\r\n    // most likely NaN\r\n    return sum;\r\n}\r\n```\r\n\r\n* Object Method\r\n\r\n```javascript\r\nvar person = {\r\n    name: \"Chris\",\r\n    sayHello: function() {\r\n        // refers to the person object\r\n        return this.name; \r\n    }\r\n}\r\n\r\nperson.sayHello();\r\n```\r\n\r\n* Constructor \r\n\r\n```javascript\r\nfunction SpaceShip(name) {\r\n    this.name = name; // it depends\r\n    return this; // implied\r\n}\r\n\r\n// refers to the new object, this.name will equal \"Millennium Falcon\"\r\nvar transport = new SpaceShip(\"Millennium Falcon\"); \r\n\r\n// refers to the global object, this.name will be undefined\r\nvar transport = SpaceShip(\"Millennium Falcon\"); \r\n```\r\n\r\n* Call & Apply\r\n\r\n```javascript\r\nvar person = {\r\n    name: \"Chris\",\r\n    sayHello: function() {\r\n        // refers to the invoking object\r\n        return this.name; \r\n    }\r\n}\r\n\r\nvar zombie = {\r\n    name: \"Fred\"\r\n}\r\n\r\n// refers to zombie, this.name will be \"Fred\"\r\nperson.sayHello.apply(zombie, params);\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}