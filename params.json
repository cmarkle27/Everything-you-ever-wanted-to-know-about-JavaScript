{"name":"Everything-you-ever-wanted-to-know-about-javascript","tagline":"(But were afraid to ask)","body":"# JavaScript Looks Familiar\r\n\r\n***  \r\n\r\n## __Designed to be easy for developers to pick up__  \r\n\r\n```javascript\r\nif (encoder.state == \"cue record\") {\r\n    beginRecording();\r\n}\r\n```\r\n\r\n## __Is actually based on the languages Scheme and Self__  \r\n\r\n```javascript\r\nfunction Y(le) {\r\n    return (function (f) {\r\n        return f(f);\r\n    }(function (f) {\r\n        return le(function (x) {\r\n            return f(f)(x);\r\n        });\r\n    }));\r\n}\r\n\r\nvar sliced = Array.prototype.slice.call(arguments, 2);\r\n```\r\n<br><br><br>\r\n\r\n# JavaScript Requires an Environment  \r\n\r\n***  \r\n\r\n## __Provides a root object and an environment API__\r\n\r\n* Browser: window object and the DOM + BOM  \r\n* Server: process object and the native modules \r\n\r\n<br><br><br>\r\n<br><br><br>\r\n<br><br><br>\r\n\r\n# Single Threaded and Event Driven \r\n\r\n***  \r\n\r\n### Basic flow of execution: \r\n1. Script is parsed and lexed \r\n1. Code is executed \r\n1. Events are registered \r\n1. Idles in event loop \r\n1. Triggered events are added to the queue (return to 1) \r\n\r\n```javascript\r\n// one thing at a time\r\nfor (var i = 1; i < 1000; i++) {\r\n    console.log(i);\r\n    if (i === 250) alert(\"Wait!\");\r\n}\r\n\r\n// events fire asynchronously\r\nvar no;\r\n\r\nfor (var i = 1; i <= 10; i++) {\r\n    no = i;\r\n    setTimeout(function() {\r\n       console.log('setting: ' + no);\r\n    }, 500);\r\n}\r\n```\r\n\r\n<br><br><br>\r\n\r\n# Variables \r\n\r\n***  \r\n\r\n* Declared with “var” keyword\r\n* Dynamically typed\r\n* Simple types are copied by value\r\n* Complex types are copied by reference\r\n\r\n```javascript\r\n// simple values like are copied by value\r\nvar a = 7;\r\nvar b = a;\r\na = 4;\r\nconsole.log(a, b);\r\n\r\n// complex values are passed by reference\r\nvar yourCar = new Object();\r\nyourCar.make = \"Ford\";\r\nyourCar.model = \"Mustang\";\r\nyourCar.mileage = 28000;\r\n\r\nvar myCar = yourCar;\r\nyourCar.mileage = 30000;\r\n\r\nconsole.log(myCar);\r\n```\r\n\r\n<br><br><br>\r\n\r\n# Everything is an Object \r\n\r\n***  \r\n\r\n## Even primitives are objects\r\n\r\n```javascript\r\n// strings are objects\r\nvar name = \"Christopher\";\r\nconsole.log(typeof name, name.length);\r\n\r\n// numbers are objects\r\nvar myNumber = 13.27;\r\nconsole.log(typeof myNumber, myNumber.toFixed());\r\n\r\n// objects are objects\r\nvar obj = {\r\n  \"title\": \"Leviathan Wakes\",\r\n  \"author\": \"James S. A. Corey\"\r\n  \"pages\": 561\r\n}\r\nconsole.log(typeof obj, obj.author)\r\n\r\n// functions are objects\r\nvar fun = function myFun() {}\r\nconsole.log(typeof fun, fun.name);\r\n```\r\n\r\n## Objects can contain simple or complex types\r\n\r\n```javascript\r\nvar recording = new Object();\r\n\r\n// number\r\nrecording.duration = 31000;\r\n\r\n// string\r\nrecording.slug = \"Cat Roomba Video\";\r\n\r\n// array\r\nrecording.tags = [\"funny\", \"lolcat\", \"roomba\"];\r\n\r\n// object\r\nrecording.meta = {\r\n  \"bureau\" : \"DC\",\r\n  \"date\" : \"08/12/2007\"\r\n};\r\n\r\n// function\r\nrecording.getDuration = function() {\r\n  return Math.floor(this.duration / 1000).toFixed();\r\n};\r\n\r\nconsole.log(recording);\r\n```\r\n<br><br><br>\r\n\r\n# As Promised\r\n\r\n***  \r\n\r\n<iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/wBqzjH91WFo\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\n<br><br><br>\r\n\r\n# JavaScript is Functional\r\n\r\n***  \r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}